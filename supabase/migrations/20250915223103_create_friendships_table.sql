-- Create friendships table
-- Manages the relationship and sharing permissions between two users
CREATE TABLE friendships (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id_1 uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    user_id_2 uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'active')),
    requested_by uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at timestamptz NOT NULL DEFAULT now(),
    -- Prevent self-friendship
    CONSTRAINT no_self_friendship CHECK (user_id_1 != user_id_2)
);

-- Create unique index to prevent duplicate friendships (regardless of order)
CREATE UNIQUE INDEX unique_friendship_pair
    ON friendships (LEAST(user_id_1, user_id_2), GREATEST(user_id_1, user_id_2));

-- Enable Row Level Security
ALTER TABLE friendships ENABLE ROW LEVEL SECURITY;

-- RLS Policies for friendships table
-- A user can only view rows where their ID is in user_id_1 or user_id_2
CREATE POLICY "Users can view own friendships" ON friendships
    FOR SELECT
    USING (auth.uid() = user_id_1 OR auth.uid() = user_id_2);

-- Users can insert friendships where they are user_id_1 or user_id_2
CREATE POLICY "Users can create friendships" ON friendships
    FOR INSERT
    WITH CHECK (auth.uid() = user_id_1 OR auth.uid() = user_id_2);

-- Users can update friendships where they are involved
CREATE POLICY "Users can update own friendships" ON friendships
    FOR UPDATE
    USING (auth.uid() = user_id_1 OR auth.uid() = user_id_2);

-- Users can delete friendships where they are involved
CREATE POLICY "Users can delete own friendships" ON friendships
    FOR DELETE
    USING (auth.uid() = user_id_1 OR auth.uid() = user_id_2);