-- Create encrypted_locations table
-- Stores E2EE location data blobs. This table contains no personally identifiable information in a readable format
CREATE TABLE encrypted_locations (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    sender_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    recipient_id uuid NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    payload text NOT NULL, -- The encrypted data blob, encoded in Base64
    created_at timestamptz NOT NULL DEFAULT now()
);

-- Create index for efficient querying by recipient and creation time
CREATE INDEX idx_encrypted_locations_recipient_created
    ON encrypted_locations(recipient_id, created_at DESC);

-- Create index for efficient cleanup by creation time
CREATE INDEX idx_encrypted_locations_created_at
    ON encrypted_locations(created_at);

-- Enable Row Level Security
ALTER TABLE encrypted_locations ENABLE ROW LEVEL SECURITY;

-- RLS Policies for encrypted_locations table
-- A user can only insert a row where sender_id is their own user ID
CREATE POLICY "Users can send encrypted locations" ON encrypted_locations
    FOR INSERT
    WITH CHECK (auth.uid() = sender_id);

-- A user can only select rows where recipient_id is their own user ID
CREATE POLICY "Users can receive encrypted locations" ON encrypted_locations
    FOR SELECT
    USING (auth.uid() = recipient_id);

-- Enable realtime for this table so clients can subscribe to new location updates
ALTER PUBLICATION supabase_realtime ADD TABLE encrypted_locations;